pipeline {
    agent any

    stages {
        stage('Checkout Code') {
            steps {
                git url: 'https://github.com/ahmshaheer/flaskapp-Jenkins-Docker.git', branch: 'main'
            }
        }

        stage('Create Docker Network') {
            steps {
                sh 'docker network create app-network || true'
            }
        }

        stage('Start MySQL') {
            steps {
                sh """
                    docker run -d --name mysql-container --network app-network \
                    -e MYSQL_ROOT_PASSWORD=rootpassword \
                    -e MYSQL_DATABASE=your_database_name \
                    -e MYSQL_USER=your_user \
                    -e MYSQL_PASSWORD=your_password \
                    -p 3306:3306 mysql:latest
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t apppython .'
            }
        }

        stage('Run Flask App for Testing') {
            steps {
                sh """
                    docker run --rm --name flask-app-test --network app-network \
                    -e DB_HOST=mysql-container \
                    -e DB_USER=your_user \
                    -e DB_PASSWORD=your_password \
                    -e DB_NAME=your_database_name \
                    apppython
                """
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker tag apppython your-dockerhub-username/app-python:latest
                        docker push your-dockerhub-username/app-python:latest
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up resources...'
            sh """
                docker stop mysql-container || true
                docker rm mysql-container || true
                docker network rm app-network || true
            """
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
